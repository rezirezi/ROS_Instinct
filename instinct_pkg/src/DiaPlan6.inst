// *** Instinct Robot Plan generated by dia/instinctgen.py ***
// *** 2019-08-13 00:09:00 C:\Users\tsulu\Downloads\Instinct-RobotWorld-master\Instinct-RobotWorld-master\plans\DiaPlan6.inst

// *** First, clear the old plan and initialise the buffers ***
PLAN R C
// AP=0, APE=0, C=0, CE=0, D=2, A=2
PLAN R I 0 0 0 0 2 2

// *** These are the Plan Elements. ***

// Template for Drives
// Drive: Go
// 	Children: MoveForwards
//	Priority=240
//	Interval=1
//	Sense=FrontRight
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=20
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
//	RampIncrement=0
//	UrgencyMultiplier=0
//	RampInterval=0
PLAN A D 1 2 240 1 2 2 20 0 0 0 0 0

// Template for Drives
// Drive: Stop
// 	Children: STOP
//	Priority=250
//	Interval=1
//	Sense=FrontRight
//	Comparator=LT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=20
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
//	RampIncrement=0
//	UrgencyMultiplier=0
//	RampInterval=0
PLAN A D 4 3 250 1 2 3 20 0 0 0 0 0

// Action: STOP
// 	Parents: Stop
//	Action=Stop
//	ActionValue=0
PLAN A A 3 6 0

// Action: MoveForwards
// 	Parents: Go
//	Action=SetSpeed
//	ActionValue=2
PLAN A A 2 5 2

// *** Plan Element Names follow ... ***

// Template for Drives
// Drive: Go
PELEM Go=1

// Template for Drives
// Drive: Stop
PELEM Stop=4

// Action: STOP
PELEM STOP=3

// Action: MoveForwards
PELEM MoveForwards=2

// *** Plan output complete. RobotSenses and RobotActions follow ... ***

// Return true if a potential mate is detected
// RobotSense: SenseMate
//	SenseID=9
RSENSE SenseMate=9

// Returns random number 1-100
// RobotSense: Random
//	SenseID=7
RSENSE Random=7

// Returns 50
// RobotSense: Fifty
//	SenseID=8
RSENSE Fifty=8

// Rear left sensor - returns 0-4
// RobotSense: RearLeft
//	SenseID=3
RSENSE RearLeft=3

// Front left sensor - returns 0-4
// RobotSense: FrontLeft
//	SenseID=1
RSENSE FrontLeft=1

// Rear right sensor - returns 0-4
// RobotSense: RearRight
//	SenseID=4
RSENSE RearRight=4

// Front sensor - returns 0-4
// RobotSense: Front
//	SenseID=5
RSENSE Front=5

// Front right sensor - returns 0-4
// RobotSense: FrontRight
//	SenseID=2
RSENSE FrontRight=2

// Rear sensor - returns 0-4
// RobotSense: Rear
//	SenseID=6
RSENSE Rear=6

// Mate with conspecific
// RobotAction: Mate
//	ActionID=8
RACTION Mate=8

// Rotate either clockwise or anti-clockwise by ActionValue degrees. Must be a multiple of 45. Random selection of direction.
// RobotAction: RandomTurn
//	ActionID=9
RACTION RandomTurn=9

// Sleep for ActionValue clock cycles
// RobotAction: SetSpeed
//	ActionID=5
RACTION SetSpeed=5

// Stop moving.
// RobotAction: Stop
//	ActionID=6
RACTION Stop=6

// Rotate clockwise by ActionValue degrees. Must be a multiple of 45
// RobotAction: Turn
//	ActionID=3
RACTION Turn=3

// Move in the direction of travel by ActionValue units
// RobotAction: MoveBy
//	ActionID=2
RACTION MoveBy=2

// Always suceed
// RobotAction: Succeed
//	ActionID=7
RACTION Succeed=7

// Srt the robot speed in units per clock tick.
// RobotAction: Sleep
//	ActionID=1
RACTION Sleep=1

// Always fail
// RobotAction: Fail
//	ActionID=16
RACTION Fail=16

// *** Output completed. ***
