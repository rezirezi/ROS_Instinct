// *** Instinct Robot Plan generated by dia/instinctgen.py ***
// *** 2019-08-11 03:22:33 C:\Users\tsulu\Downloads\Instinct-RobotWorld-master\Instinct-RobotWorld-master\plans\DiaPlanSimpledia.inst

// *** First, clear the old plan and initialise the buffers ***
PLAN R C
// AP=0, APE=0, C=1, CE=2, D=1, A=2
PLAN R I 0 0 1 2 1 2

// *** These are the Plan Elements. ***

// Action: STOP
// 	Parents: CE4
//	Action=Stop
//	ActionValue=0
PLAN A A 6 6 0

// Drive forward, avoiding objects as they are sensed
// Competence: ForwardAvoiding
// 	Parents: Explore
// 	Children: CE3, CE4
//	UseORWithinCEGroup=1
PLAN A C 2 1

// Template for Drives
// Drive: Explore
// 	Children: ForwardAvoiding
//	Priority=240
//	Interval=1
//	Sense=Fifty
//	Comparator=TR	// EQ, NE, GT, LT, TR, FL
//	SenseValue=0
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
//	RampIncrement=0
//	UrgencyMultiplier=0
//	RampInterval=0
PLAN A D 1 2 240 1 8 4 0 0 0 0 0 0

// CompetenceElement: CE4
// 	Parents: ForwardAvoiding
// 	Children: STOP
//	Priority=6
//	RetryLimit=0
//	Sense=FrontRight
//	Comparator=LT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=20
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A E 3 2 6 6 0 2 3 20 0 0

// CompetenceElement: CE3
// 	Parents: ForwardAvoiding
// 	Children: MoveForwards
//	Priority=4
//	RetryLimit=0
//	Sense=FrontRight
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=19
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A E 4 2 5 7 0 2 2 20 0 0

// Action: MoveForwards
// 	Parents: CE3
//	Action=SetSpeed
//	ActionValue=2
PLAN A A 5 5 2

// *** Plan Element Names follow ... ***

// Action: STOP
PELEM STOP=6

// Drive forward, avoiding objects as they are sensed
// Competence: ForwardAvoiding
PELEM ForwardAvoiding=2

// Template for Drives
// Drive: Explore
PELEM Explore=1

// CompetenceElement: CE4
PELEM CE4=3

// CompetenceElement: CE3
PELEM CE3=4

// Action: MoveForwards
PELEM MoveForwards=5

// *** Plan output complete. RobotSenses and RobotActions follow ... ***

// Return true if a potential mate is detected
// RobotSense: SenseMate
//	SenseID=9
RSENSE SenseMate=9

// Returns random number 1-100
// RobotSense: Random
//	SenseID=7
RSENSE Random=7

// Returns 50
// RobotSense: Fifty
//	SenseID=8
RSENSE Fifty=8

// Rear left sensor - returns 0-4
// RobotSense: RearLeft
//	SenseID=3
RSENSE RearLeft=3

// Front left sensor - returns 0-4
// RobotSense: FrontLeft
//	SenseID=1
RSENSE FrontLeft=1

// Rear right sensor - returns 0-4
// RobotSense: RearRight
//	SenseID=4
RSENSE RearRight=4

// Front sensor - returns 0-4
// RobotSense: Front
//	SenseID=5
RSENSE Front=5

// Front right sensor - returns 0-4
// RobotSense: FrontRight
//	SenseID=2
RSENSE FrontRight=2

// Rear sensor - returns 0-4
// RobotSense: Rear
//	SenseID=6
RSENSE Rear=6

// Mate with conspecific
// RobotAction: Mate
//	ActionID=8
RACTION Mate=8

// Rotate either clockwise or anti-clockwise by ActionValue degrees. Must be a multiple of 45. Random selection of direction.
// RobotAction: RandomTurn
//	ActionID=9
RACTION RandomTurn=9

// Rotate clockwise by ActionValue degrees. Must be a multiple of 45
// RobotAction: Turn
//	ActionID=3
RACTION Turn=3

// Stop moving.
// RobotAction: Stop
//	ActionID=6
RACTION Stop=6

// Srt the robot speed in units per clock tick.
// RobotAction: SetSpeed
//	ActionID=1
RACTION SetSpeed=1

// Move in the direction of travel by ActionValue units
// RobotAction: MoveBy
//	ActionID=2
RACTION MoveBy=2

// Always suceed
// RobotAction: Succeed
//	ActionID=7
RACTION Succeed=7

// Sleep for ActionValue clock cycles
// RobotAction: Sleep
//	ActionID=5
RACTION Sleep=5

// Always fail
// RobotAction: Fail
//	ActionID=16
RACTION Fail=16

// *** Output completed. ***
