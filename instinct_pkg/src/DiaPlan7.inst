// *** Instinct Robot Plan generated by dia/instinctgen.py ***
// *** 2019-08-17 21:12:54 C:\Users\tsulu\Downloads\Instinct-RobotWorld-master\Instinct-RobotWorld-master\plans\DiaPlan7.inst

// *** First, clear the old plan and initialise the buffers ***
PLAN R C
// AP=2, APE=11, C=1, CE=2, D=3, A=7
PLAN R I 2 11 1 2 3 7

// *** These are the Plan Elements. ***

// (NULL)
// Action: RotateRight
// 	Parents: APE3, APE12
//	Action=RotateRight
//	ActionValue=90
PLAN A A 11 7 90

// (NULL)
// ActionPattern: AP2
// 	Parents: ObstLeft
// 	Children: APE13, APE7, APE6, APE5, APE4, APE3
PLAN A P 8

// Template for Drives
// Drive: Stop
// 	Children: STOP
//	Priority=250
//	Interval=0
//	Sense=IsDest
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=24
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
//	RampIncrement=0
//	UrgencyMultiplier=0
//	RampInterval=0
PLAN A D 3 2 250 0 10 2 24 0 0 0 0 0

// Action: STOP
// 	Parents: Stop
//	Action=Stop
//	ActionValue=0
PLAN A A 2 6 0

// (NULL)
// CompetenceElement: ObstRight
// 	Parents: IsClear
// 	Children: AP3
//	Priority=1
//	RetryLimit=0
//	Sense=FrontC
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=0
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A E 19 6 20 1 0 5 2 0 0 0

// (NULL)
// Action: RotateLeft
// 	Parents: APE8, APE7
//	Action=RotateLeft
//	ActionValue=90
PLAN A A 13 8 90

// (NULL)
// Action: STOP1
// 	Parents: APE13, APE11, APE13, APE6
//	Action=Stop
//	ActionValue=0
PLAN A A 16 6 0

// (NULL)
// ActionPattern: AP3
// 	Parents: ObstRight
// 	Children: APE8, APE11, APE10, APE9, APE12, APE13
PLAN A P 20

// (NULL)
// ActionPatternElement: APE12
// 	Parents: AP3
// 	Children: RotateRight
//	Order=6
PLAN A L 25 20 11 6

// (NULL)
// ActionPatternElement: APE13
// 	Parents: AP2, AP3
// 	Children: STOP1, STOP1
//	Order=1
PLAN A L 27 0 0 1

// Template for Drives
// Drive: FrontObst
// 	Children: IsClear
//	Priority=255
//	Interval=0
//	Sense=FrontMin
//	Comparator=LT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=30
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
//	RampIncrement=0
//	UrgencyMultiplier=0
//	RampInterval=0
PLAN A D 5 6 255 0 11 3 30 0 0 0 0 0

// (NULL)
// ActionPatternElement: APE11
// 	Parents: AP3
// 	Children: STOP1
//	Order=5
PLAN A L 24 20 16 5

// (NULL)
// ActionPatternElement: APE3
// 	Parents: AP2
// 	Children: RotateRight
//	Order=2
PLAN A L 9 8 11 2

// (NULL)
// ActionPatternElement: APE4
// 	Parents: AP2
// 	Children: Go1
//	Order=3
PLAN A L 10 8 15 3

// (NULL)
// ActionPatternElement: APE5
// 	Parents: AP2
// 	Children: Sleep
//	Order=4
PLAN A L 14 8 12 4

// (NULL)
// ActionPatternElement: APE6
// 	Parents: AP2
// 	Children: STOP1
//	Order=5
PLAN A L 17 8 16 5

// (NULL)
// ActionPatternElement: APE7
// 	Parents: AP2
// 	Children: RotateLeft
//	Order=6
PLAN A L 18 8 13 6

// (NULL)
// ActionPatternElement: APE8
// 	Parents: AP3
// 	Children: RotateLeft
//	Order=2
PLAN A L 21 20 13 2

// (NULL)
// ActionPatternElement: APE9
// 	Parents: AP3
// 	Children: Go1
//	Order=3
PLAN A L 22 20 15 3

// Drive forward, avoiding objects as they are sensed
// Competence: IsClear
// 	Parents: FrontObst
// 	Children: ObstRight, ObstLeft
//	UseORWithinCEGroup=1
PLAN A C 6 1

// Template for Drives
// Drive: DriveToDest
// 	Children: Go
//	Priority=240
//	Interval=0
//	Sense=IsDest
//	Comparator=LT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=25
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
//	RampIncrement=0
//	UrgencyMultiplier=0
//	RampInterval=0
PLAN A D 1 4 240 0 10 3 25 0 0 0 0 0

// (NULL)
// Action: Go1
// 	Parents: APE4, APE9
//	Action=SetSpeed
//	ActionValue=2
PLAN A A 15 5 2

// (NULL)
// ActionPatternElement: APE10
// 	Parents: AP3
// 	Children: Sleep
//	Order=4
PLAN A L 23 20 12 4

// (NULL)
// Action: Sleep
// 	Parents: APE10, APE5
//	Action=Sleep
//	ActionValue=3
PLAN A A 12 10 3

// (NULL)
// CompetenceElement: ObstLeft
// 	Parents: IsClear
// 	Children: AP2
//	Priority=1
//	RetryLimit=0
//	Sense=FrontC
//	Comparator=LT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=0
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A E 7 6 8 1 0 5 3 0 0 0

// Action: Go
// 	Parents: DriveToDest
//	Action=SetSpeed
//	ActionValue=2
PLAN A A 4 5 2

// *** Plan Element Names follow ... ***

// (NULL)
// Action: RotateRight
PELEM RotateRight=11

// (NULL)
// ActionPattern: AP2
PELEM AP2=8

// Template for Drives
// Drive: Stop
PELEM Stop=3

// Action: STOP
PELEM STOP=2

// (NULL)
// CompetenceElement: ObstRight
PELEM ObstRight=19

// (NULL)
// Action: RotateLeft
PELEM RotateLeft=13

// (NULL)
// Action: STOP1
PELEM STOP1=16

// (NULL)
// ActionPattern: AP3
PELEM AP3=20

// (NULL)
// ActionPatternElement: APE12
PELEM APE12=25

// (NULL)
// ActionPatternElement: APE13
PELEM APE13=27

// Template for Drives
// Drive: FrontObst
PELEM FrontObst=5

// (NULL)
// ActionPatternElement: APE11
PELEM APE11=24

// (NULL)
// ActionPatternElement: APE3
PELEM APE3=9

// (NULL)
// ActionPatternElement: APE4
PELEM APE4=10

// (NULL)
// ActionPatternElement: APE5
PELEM APE5=14

// (NULL)
// ActionPatternElement: APE6
PELEM APE6=17

// (NULL)
// ActionPatternElement: APE7
PELEM APE7=18

// (NULL)
// ActionPatternElement: APE8
PELEM APE8=21

// (NULL)
// ActionPatternElement: APE9
PELEM APE9=22

// Drive forward, avoiding objects as they are sensed
// Competence: IsClear
PELEM IsClear=6

// Template for Drives
// Drive: DriveToDest
PELEM DriveToDest=1

// (NULL)
// Action: Go1
PELEM Go1=15

// (NULL)
// ActionPatternElement: APE10
PELEM APE10=23

// (NULL)
// Action: Sleep
PELEM Sleep=12

// (NULL)
// CompetenceElement: ObstLeft
PELEM ObstLeft=7

// Action: Go
PELEM Go=4

// *** Plan output complete. RobotSenses and RobotActions follow ... ***

// Return true if a potential mate is detected
// RobotSense: SenseMate
//	SenseID=9
RSENSE SenseMate=9

// Returns random number 1-100
// RobotSense: Random
//	SenseID=7
RSENSE Random=7

// Return true if a potential mate is detected
// RobotSense: IsDest
//	SenseID=10
RSENSE IsDest=10

// Returns 50
// RobotSense: Fifty
//	SenseID=8
RSENSE Fifty=8

// Rear left sensor - returns 0-4
// RobotSense: RearLeft
//	SenseID=3
RSENSE RearLeft=3

// Front sensor - returns 0-4
// RobotSense: FrontC
//	SenseID=5
RSENSE FrontC=5

// Front left sensor - returns 0-4
// RobotSense: FrontLeft
//	SenseID=1
RSENSE FrontLeft=1

// RobotSense: FrontMin
//	SenseID=11
RSENSE FrontMin=11

// Rear right sensor - returns 0-4
// RobotSense: RearRight
//	SenseID=4
RSENSE RearRight=4

// Front right sensor - returns 0-4
// RobotSense: FrontRight
//	SenseID=2
RSENSE FrontRight=2

// Rear sensor - returns 0-4
// RobotSense: Rear
//	SenseID=6
RSENSE Rear=6

// Always suceed
// RobotAction: RotateRight
//	ActionID=7
RACTION RotateRight=7

// Sleep for ActionValue clock cycles
// RobotAction: SetSpeed
//	ActionID=5
RACTION SetSpeed=5

// Stop moving.
// RobotAction: Stop
//	ActionID=6
RACTION Stop=6

// Rotate clockwise by ActionValue degrees. Must be a multiple of 45
// RobotAction: Turn
//	ActionID=3
RACTION Turn=3

// Move in the direction of travel by ActionValue units
// RobotAction: MoveBy
//	ActionID=2
RACTION MoveBy=2

// RobotAction: Sleep
//	ActionID=10
RACTION Sleep=10

// Always fail
// RobotAction: Fail
//	ActionID=16
RACTION Fail=16

// Mate with conspecific
// RobotAction: RotateLeft
//	ActionID=8
RACTION RotateLeft=8

// *** Output completed. ***
